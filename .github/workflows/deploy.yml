name: CI/CD - Docker Build & Deploy to EC2 & Render

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_NAME: jaydaniel10/student-tracker

jobs:
  build-test-push-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout source
      - name: Checkout repository
        uses: actions/checkout@v4

      # Run Python tests before building
      - name: Set up Python
        uses: actions/setup-python@v4
        with: 
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      - name: Run tests
        run: |
          if [ -d tests ]; then
            pytest -q
          else
            echo "‚ö†Ô∏è No tests folder, skipping..."
          fi

      # Docker login & build
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: docker build -t $IMAGE_NAME:latest .

      # Test container locally
      - name: Run container for test
        run: |
          docker run -d -p 8000:8000 \
            --name test_container \
            -e VAULT_ADDR="${{ secrets.VAULT_ADDR }}" \
            -e VAULT_ROLE_ID="${{ secrets.VAULT_ROLE_ID }}" \
            -e VAULT_SECRET_ID="${{ secrets.VAULT_SECRET_ID }}" \
            $IMAGE_NAME:latest

          echo "‚è≥ Waiting for container health..."
          for i in {1..10}; do
            curl --fail http://localhost:8000/health && break || sleep 2
          done

          echo "‚úÖ Container logs:"
          docker logs --tail=30 test_container
          docker stop test_container
          docker rm test_container

      - name: Push image to Docker Hub
        run: docker push $IMAGE_NAME:latest

      # Deploy script reused for EC2 instances
      - name: Deploy to EC2 Instance 1
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST_1 }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker pull ${{ env.IMAGE_NAME }}:latest
            if [ "$(sudo docker ps -aq -f name=student-tracker)" ]; then
              sudo docker stop student-tracker || true
              sudo docker rm student-tracker || true
            fi
            sudo docker run -d --name student-tracker -p 8000:8000 \
              --restart always \
              -e VAULT_ADDR=${{ secrets.VAULT_ADDR }} \
              -e VAULT_ROLE_ID=${{ secrets.VAULT_ROLE_ID }} \
              -e VAULT_SECRET_ID=${{ secrets.VAULT_SECRET_ID }} \
              ${{ env.IMAGE_NAME }}:latest
            sudo docker ps --filter "name=student-tracker"

      - name: Deploy to EC2 Instance 2
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST_2 }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker pull ${{ env.IMAGE_NAME }}:latest
            if [ "$(sudo docker ps -aq -f name=student-tracker)" ]; then
              sudo docker stop student-tracker || true
              sudo docker rm student-tracker || true
            fi
            sudo docker run -d --name student-tracker -p 8000:8000 \
              --restart always \
              -e VAULT_ADDR=${{ secrets.VAULT_ADDR }} \
              -e VAULT_ROLE_ID=${{ secrets.VAULT_ROLE_ID }} \
              -e VAULT_SECRET_ID=${{ secrets.VAULT_SECRET_ID }} \
              ${{ env.IMAGE_NAME }}:latest
            sudo docker ps --filter "name=student-tracker"

      # Trigger Render deployment
      - name: Deploy to Render
        run: |
          echo "Fetching Render service ID..."
          SERVICE_NAME="${{ secrets.RENDER_SERVICE_NAME }}"
          SERVICE_ID=$(curl -s -X GET "https://api.render.com/v1/services" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Accept: application/json" | \
            jq -r '.[] | select((.service.name==$ENV_SERVICE_NAME) or (.name==$ENV_SERVICE_NAME)) | .id' \
            --arg ENV_SERVICE_NAME "$SERVICE_NAME")

          if [ -z "$SERVICE_ID" ] || [ "$SERVICE_ID" == "null" ]; then
            echo "‚ùå Render service '$SERVICE_NAME' not found"
            exit 1
          fi

          echo "üöÄ Deploying to Render service ID: $SERVICE_ID"
          curl -s -X POST "https://api.render.com/v1/services/$SERVICE_ID/deploys" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Accept: application/json" \
            -H "Content-Type: application/json"

