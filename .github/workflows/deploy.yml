name: CI/CD - Docker Build & Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_NAME: jaydaniel10/student-tracker

jobs:
  build-test-push-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Run Python tests before building
    - name: Set up Python
      uses: actions/setup-python@v4
      with: 
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt;
        fi
    - name: Run tests
      run: |
        if [ -d tests ]; then pytest -q; else echo "No test folder, skipping..."; fi

    # Docker login & build
    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build Docker image
      run: docker build -t $IMAGE_NAME:latest .

    - name: Run container for test
      run: |
        docker run -d -p 8000:8000 \
          --name test_container \
          -e VAULT_ADDR="${{ secrets.VAULT_ADDR }}" \
          -e VAULT_ROLE_ID="${{ secrets.VAULT_ROLE_ID }}" \
          -e VAULT_SECRET_ID="${{ secrets.VAULT_SECRET_ID }}" \
          $IMAGE_NAME:latest
 
        for i in {1..10}; do
          curl --fail http://localhost:8000/health && break || sleep 2
        done
 
        docker logs test_container
        docker stop test_container
        docker rm test_container

    - name: Push image to Docker Hub
      run: docker push $IMAGE_NAME:latest

    # Deploy to EC2 Instance 1
    - name: Deploy to EC2 Instance 1
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST_1 }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          docker pull ${{ env.IMAGE_NAME }}:latest
          docker stop student-tracker || true
          docker rm student-tracker || true
          docker run -d --name student-tracker -p 8000:8000 \
            -e VAULT_ADDR=${{ secrets.VAULT_ADDR }} \
            -e VAULT_ROLE_ID=${{ secrets.VAULT_ROLE_ID }} \
            -e VAULT_SECRET_ID=${{ secrets.VAULT_SECRET_ID }} \
            ${{ env.IMAGE_NAME }}:latest

          

    # Deploy to EC2 Instance 2
    - name: Deploy to EC2 Instance 2
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST_2 }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          docker pull ${{ env.IMAGE_NAME }}:latest
          docker stop student-tracker || true
          docker rm student-tracker || true
          docker run -d --name student-tracker -p 8000:8000 \
            -e VAULT_ADDR=${{ secrets.VAULT_ADDR }} \
            -e VAULT_ROLE_ID=${{ secrets.VAULT_ROLE_ID }} \
            -e VAULT_SECRET_ID=${{ secrets.VAULT_SECRET_ID }} \
            ${{ env.IMAGE_NAME }}:latest

        # Trigger Render deploy
        # Trigger Render Deployment (auto fetch service ID)
    - name: Deploy to Render
      run: |
        echo "Fetching Render service ID..."
        SERVICE_NAME="${{ secrets.RENDER_SERVICE_NAME }}"
        SERVICE_ID=$(curl -s -X GET "https://api.render.com/v1/services" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Accept: application/json" | \
          jq -r '.[] | select(.service.name=="${{ secrets.RENDER_SERVICE_NAME }}") | .id')

        if [ -z "$SERVICE_ID" ]; then
          echo "‚ùå Render service '${{ secrets.RENDER_SERVICE_NAME }}' not found"
          exit 1
        fi

        echo "Deploying to Render service ID: $SERVICE_ID"
        curl -X POST "https://api.render.com/v1/services/$SERVICE_ID/deploys" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Accept: application/json" \
          -H "Content-Type: application/json"



         
